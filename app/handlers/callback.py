from aiogram import F, Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from app.crud.user_group_association import crud_user_group_association
from app.models import UserGroupAssociation

router = Router()


def truncate_string_to_byte_length(input_string: str, max_byte_length: int = 64) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –≤ –±–∞–π—Ç–∞—Ö, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    input_string (str): –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–µ–∑–∞—Ç—å.
    max_byte_length (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    str: –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É –≤ –±–∞–π—Ç–∞—Ö.
    """

    max_byte = max_byte_length
    while len(input_string.encode('utf-8')) >= max_byte_length:
        input_string = input_string[:max_byte]
        max_byte -= 1
    return input_string


@router.callback_query(F.data.startswith('faction_'))
async def callbacks_faction(
    callback: types.CallbackQuery,
    session: AsyncSession,
) -> None:
    action: str = callback.data.split('_')[1]
    user_id: int = callback.from_user.id
    if action == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É':
        user_chat_admin: list[
            UserGroupAssociation
        ] = await crud_user_group_association.get_chat_where_user_admin(
            user_id=user_id, session=session
        )
        chat_list: list[list[str]] = [
            [group.group.group_name, group.group.group_id] for group in user_chat_admin
        ]
        # –°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for chat in chat_list:
            chat_name: str = chat[0]
            chat_id: int = chat[1]
            call_back_text: str = f'chat_{chat_id}_{chat_name}'
            builder.add(
                types.InlineKeyboardButton(
                    text=str(chat_name),
                    callback_data=truncate_string_to_byte_length(call_back_text),
                )
            )
        builder.adjust(2)
        chat_name_list: list[str] = [chat[0] for chat in chat_list]
        await callback.message.answer(
            f'–ì—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∞–¥–º–∏–Ω:\nüëâ {"\nüëâ ".join(chat_name_list)}\n\n'
            '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞?\n'
            '–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏ "–î–∞".\n\n'
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–±—è –¥–æ—Å—Ç–∞–ª–∏?\n'
            '–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏ "–ù–µ—Ç".',
            reply_markup=builder.as_markup(resize_keyboard=True),
        )
        await callback.answer()
    else:
        await callback.answer(
            '–ü–æ–∫–∞ —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ–ø–∏–ª–∏–ºü§®',
            show_alert=True,
        )
        await callback.answer()


@router.callback_query(F.data.startswith('chat_'))
async def callbacks_chat(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'chat_'.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.

    :param callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ Telegram.
    """
    messages: list[str] = ['–î–∞', '–ù–µ—Ç']
    chat_name: str = callback.data.split('_')[2]
    chat_id: int = callback.data.split('_')[1]
    builder = InlineKeyboardBuilder()
    for message in messages:
        call_back_text = f'act_{message}_{chat_id}_{chat_name}'
        builder.add(
            types.InlineKeyboardButton(
                text=str(message),
                callback_data=truncate_string_to_byte_length(call_back_text),
            )
        )
    builder.adjust(2)
    await callback.message.answer(
        f'–¢—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_name}?',
        reply_markup=builder.as_markup(resize_keyboard=True),
    )
    await callback.answer()


@router.callback_query(F.data.startswith('act_'))
async def callbacks_action_with_chat(
    callback: types.CallbackQuery, session: AsyncSession
) -> None:
    action: str = callback.data.split('_')[1]  # –ü–æ–ª—É—á–∞—Ç—å, –Ω–µ –ø–æ–ª—É—á–∞—Ç—å
    chat_name: str = callback.data.split('_')[3]
    chat_id: int = callback.data.split('_')[2]
    if action == '–î–∞':
        await crud_user_group_association.update_status_rceive_newsletter(
            user_id=callback.from_user.id,
            group_id=chat_id,
            status=True,
            session=session,
        )
        await callback.answer(
            text=f'–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ —á–∞—Ç–∞ {chat_name}',
            show_alert=True,
        )
    if action == '–ù–µ—Ç':
        await crud_user_group_association.update_status_rceive_newsletter(
            user_id=callback.from_user.id,
            group_id=chat_id,
            status=False,
            session=session,
        )
        await callback.answer(
            text=f'–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —á–∞—Ç–∞ {chat_name}',
            show_alert=True,
        )
    # –∑–¥–µ—Å—å –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
